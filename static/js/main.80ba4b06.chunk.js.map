{"version":3,"sources":["components/images/logo.svg","components/images/hero-mobile.jpg","components/images/icon-error.svg","components/images/icon-arrow.svg","components/mainContent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainContent","form","document","getElementById","email","addEventListener","e","preventDefault","emailVal","value","console","log","test","String","toLowerCase","classList","remove","add","className","src","Logo","alt","Hero","id","type","placeholder","IconError","Arrow","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,8PCMtBC,E,kLAEb,IAAMC,EAAOC,SAASC,eAAe,QAC/BC,EAAQF,SAASC,eAAe,SAEtCF,EAAKI,iBAAiB,UAAU,SAAAC,GAC5BA,EAAEC,iBACF,IAAMC,EAAWJ,EAAMK,MACvBC,QAAQC,IAAIH,GAaH,0JACCI,KAAKC,OAXIL,GAWSM,gBAPxBb,EAAKc,UAAUC,OAAO,SACtBf,EAAKc,UAAUE,IAAI,aAJnBhB,EAAKc,UAAUE,IAAI,SACnBhB,EAAKc,UAAUC,OAAO,iB,+BAa9B,OACQ,yBAAKE,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,SACrC,yBAAKH,UAAU,YAAYC,IAAKG,IAAMD,IAAI,sBAE1C,4BACA,uCACI,6BAFJ,SAII,6BAJJ,QAQA,sLAKA,0BAAME,GAAG,QACL,2BAAOA,GAAG,QAAQC,KAAK,QAAQC,YAAY,iBAC3C,yBAAKP,UAAU,aAAaC,IAAKO,IAAWL,IAAI,UAChD,gCACI,yBAAKF,IAAKQ,IAAON,IAAI,WAEzB,+BAAO,+DAInB,yBAAKH,UAAU,wB,GAxDMU,aCM1BC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCKcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASC,eAAe,SDyHpB,kBAAmBmC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.80ba4b06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.877543ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero-mobile.1d55799a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/icon-error.33780997.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-arrow.69950c2d.svg\";","import React, {Component} from 'react';\r\nimport Logo from './images/logo.svg';\r\nimport Hero from './images/hero-mobile.jpg';\r\nimport IconError from './images/icon-error.svg';\r\nimport Arrow from './images/icon-arrow.svg';\r\n\r\nexport default class MainContent extends Component {\r\n    componentDidMount() {\r\n        const form = document.getElementById('form');\r\n        const email = document.getElementById('email');\r\n\r\n        form.addEventListener('submit', e => {\r\n            e.preventDefault();\r\n            const emailVal = email.value;\r\n            console.log(emailVal);\r\n\r\n            //check if it is value email\r\n            if (!validateEmail(emailVal)){\r\n                form.classList.add('error');\r\n                form.classList.remove('success');\r\n            } else {\r\n                form.classList.remove('error');\r\n                form.classList.add('success');\r\n                }\r\n        });\r\n\r\n        function validateEmail(mail) {\r\n            var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n            return re.test(String(mail).toLowerCase());\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n                <div className=\"container\">\r\n                    <div className=\"left\">\r\n                        <div className=\"inner-container\">\r\n                            <img className=\"logo\" src={Logo} alt=\"logo\"/>\r\n                            <img className=\"bg-mobile\" src={Hero} alt=\"background-mobile\"/>\r\n\r\n                            <h1>\r\n                            <span>We're</span>\r\n                                <br />\r\n                                coming\r\n                                <br />\r\n                                soon\r\n                            </h1>\r\n\r\n                            <p>\r\n                            Hello fellow shoppers! We're currently building our new fashion store. \r\n                            Add your email below to stay up-to-date with announcements and our launch deals.\r\n                            </p>  \r\n\r\n                            <form id=\"form\">\r\n                                <input id=\"email\" type=\"email\" placeholder=\"Email Adress\"/>\r\n                                <img className=\"icon-error\" src={IconError} alt=\"error\"/>\r\n                                <button>\r\n                                    <img src={Arrow} alt=\"arrow\"/>\r\n                                </button>\r\n                                <small><p>Please provide a valid mail!</p></small> \r\n                            </form>\r\n                        </div>  \r\n                    </div>\r\n                    <div className=\"right bg-image\"></div>\r\n                </div>\r\n        )\r\n    }    \r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport MainContent from './components/mainContent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainContent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}